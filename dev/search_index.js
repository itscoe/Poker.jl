var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Poker","category":"page"},{"location":"#Poker","page":"Home","title":"Poker","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Poker]","category":"page"},{"location":"#Base.:+-Tuple{Cards.Hand,Cards.Hand}","page":"Home","title":"Base.:+","text":"+(x, y)\n\nAdds two hands together, combining their cards into a single hand. Probably more akin to a union, but duplicate cards are not supported, which helps catch bugs and ensures hands are exactly the length of the two inputs hands added.\n\n\n\n\n\n","category":"method"},{"location":"#Base.:--Tuple{Cards.Hand,Cards.Hand}","page":"Home","title":"Base.:-","text":"-(x, y)\n\nSubtracts the cards from one hand from another. Subtraction more closely follows set theory's subtraction, as cards that are attempted to be subtracted that aren't in the original hand are ignored. This should probably at least warn the user for most poker-related use cases.\n\n\n\n\n\n","category":"method"},{"location":"#Base.:<-Tuple{Cards.Hand,Cards.Hand}","page":"Home","title":"Base.:<","text":"<(x, y)\n\nSyntactic sugar for isless(x, y)\n\n\n\n\n\n","category":"method"},{"location":"#Base.:>-Tuple{Cards.Hand,Cards.Hand}","page":"Home","title":"Base.:>","text":"<(x, y)\n\nSyntactic sugar for isless(y, x)\n\n\n\n\n\n","category":"method"},{"location":"#Base.isless-Tuple{Cards.Card,Cards.Card}","page":"Home","title":"Base.isless","text":"isless(x, y)\n\nCompares if a card is less than another card based on its position in a fresh deck. This isn't actually used in Poker.jl right now, but is probably a handy functionality for any extension of Cards.jl\n\n\n\n\n\n","category":"method"},{"location":"#Base.isless-Tuple{Cards.Hand,Cards.Hand}","page":"Home","title":"Base.isless","text":"isless(x, y)\n\nCompares two hands to one another, using Texas Hold'em rules. Ties evaluate as false. If larger hands are provided than five cards, the maximal combination of five cards is used for the comparison.\n\n\n\n\n\n","category":"method"},{"location":"#Base.isless-Tuple{Cards.Suit,Cards.Suit}","page":"Home","title":"Base.isless","text":"isless(x, y)\n\nCompares if the suit of a card is ranked lower than that of another card. This isn't actually used in Poker.jl right now, but is probably a handy functionality for any extension of Cards.jl\n\n\n\n\n\n","category":"method"},{"location":"#Poker.bet-Tuple{String,Float64,Float64,Float64,Float64,Float64,Float64,Float64,Float64}","page":"Home","title":"Poker.bet","text":"bet(dealer, self_strat, opp_strat, self_prob, opp_prob, self_return,\n    opp_return, pot, big_blind)\n\nProcesses the bets for the players, given thresholds at which each player will not put more money into the game, and the calculated odds of each player winning the showdown. Also returns whether the whole get_return function should return\n\n\n\n\n\n","category":"method"},{"location":"#Poker.calculate_odds-Tuple{Cards.Hand,Cards.Hand}","page":"Home","title":"Poker.calculate_odds","text":"+(self, table[, N])\n\nComputes with N (default 1,000) Monte Carlo simulations the odds of the hand winning the showdown given the cards shown on the table\n\n\n\n\n\n","category":"method"},{"location":"#Poker.cards-Tuple{Cards.Hand}","page":"Home","title":"Poker.cards","text":"cards(hand)\n\nConverts a Hand (from Cards.jl) to an array of cards\n\n\n\n\n\n","category":"method"},{"location":"#Poker.deal-Tuple{Cards.Hand,Integer}","page":"Home","title":"Poker.deal","text":"deal(deck, n)\n\nReturns both a new hand of n cards, drawn without replacement from the deck, and the deck without the cards that were drawn\n\n\n\n\n\n","category":"method"},{"location":"#Poker.get_preflop_odds-Tuple{}","page":"Home","title":"Poker.get_preflop_odds","text":"get_preflop_odds([N])\n\nComputes with N (default 1,000) Monte Carlo simulations the odds of the each starting hand winning the showdown given no cards shown on the table yet. This table is optionally used to speed up game calculations.\n\n\n\n\n\n","category":"method"},{"location":"#Poker.get_return-Tuple{Array{Float64,N} where N,Array{Float64,N} where N}","page":"Home","title":"Poker.get_return","text":"get_return(self_strat, opp_strat[, preflop_odds_table])\n\nReturns the self return after 1 simulated game, given the multiple thresholds (one for each round of betting; ie, 4) at which either player will not put more money into the game. Optional optimization is available by specifying a pre-calculated preflop odds table\n\n\n\n\n\n","category":"method"},{"location":"#Poker.get_return-Tuple{Float64,Float64}","page":"Home","title":"Poker.get_return","text":"get_return(self_strat, opp_strat[, preflop_odds_table])\n\nReturns the self return after 1 simulated game, given the singular thresholds at which either player will not put more money into the game. Optional optimization is available by specifying a pre-calculated preflop odds table\n\n\n\n\n\n","category":"method"},{"location":"#Poker.get_returns-Tuple{Array{Float64,N} where N,Array{Float64,N} where N}","page":"Home","title":"Poker.get_returns","text":"get_returns(self_strat, opp_strat[, preflop_odds_table, N])\n\nWrapping of get_return, but the mean of N (default 5,000) times\n\n\n\n\n\n","category":"method"},{"location":"#Poker.get_returns-Tuple{Array{Float64,N} where N}","page":"Home","title":"Poker.get_returns","text":"get_returns(self_strat, opp_strat[, preflop_odds_table, N])\n\nWrapping of get_return, but the mean of N (default 100) times\n\n\n\n\n\n","category":"method"},{"location":"#Poker.get_returns_table-Tuple{}","page":"Home","title":"Poker.get_returns_table","text":"get_returns_table([preflop_odds_table, N])\n\nCalculation of a table of average returns across a gamut of singular threshold strategies, with the optional optimization of pre-calculating the preflop odds table. Default N is 5,000 simulations per pair of strategies (total 50,000,000 games)\n\n\n\n\n\n","category":"method"},{"location":"#Poker.to_string-Tuple{Cards.Hand}","page":"Home","title":"Poker.to_string","text":"to_string(hand)\n\nCompares if the suit of a card is ranked lower than that of another card. This isn't actually used in Poker.jl right now, but is probably a handy functionality for any extension of Cards.jl\n\n\n\n\n\n","category":"method"}]
}
